{"version":3,"file":"static/js/670.8d18337f.chunk.js","mappings":"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","sources":["components/AllUsers/AllUsers.styled.js","components/AllUsers/AllUsers.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const DivStyles = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 25px;\n    padding: 45px;\n    -webkit-box-align: center;\n    align-items: center;\n`;\n\nexport const ModalOverlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const EditRoleModal = styled.div`\n  background: white;\n  padding: 20px;\n  border-radius: 10px;\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const ModalButton = styled.button`\n  font-style: normal;\n  font-weight: var(--fontWeight500);\n  font-size: 14px;\n  line-height: 21px;\n  text-align: center;\n  letter-spacing: -0.02em;\n  width: 100%;\n  height: 29px;\n  background: rgb(154, 196, 60);\n  border-radius: 8px;\n  margin-top: 10px;\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\n\n\nexport const Select = styled.select`\n  padding: 5px 40px;\n`;","// import React, { useState } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { updateUserRole } from '../../redux/users/userOperations';\n\n// const Users = ({ userId }) => {\n//   const dispatch = useDispatch();\n//   const [newRole, setNewRole] = useState('');\n\n//   const handleRoleChange = (e) => {\n//     setNewRole(e.target.value);\n//   };\n\n//   const handleSubmit = () => {\n//     if (newRole) {\n//       dispatch(updateUserRole({ userId: 61, role: newRole }))\n//         .then(() => {\n//           console.log('Role updated successfully');\n//         })\n//         .catch((error) => {\n//           console.error('Failed to update role:', error);\n//         });\n//     } else {\n//       console.error('Please select a new role');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Change User Role</h3>\n//       <div>\n//         <input type=\"radio\" id=\"user\" name=\"role\" value=\"user\" checked={newRole === 'user'} onChange={handleRoleChange} />\n//         <label htmlFor=\"user\">User</label>\n//       </div>\n//       <div>\n//         <input type=\"radio\" id=\"moderator\" name=\"role\" value=\"moderator\" checked={newRole === 'moderator'} onChange={handleRoleChange} />\n//         <label htmlFor=\"moderator\">Moderator</label>\n//       </div>\n//       <div>\n//         <input type=\"radio\" id=\"admin\" name=\"role\" value=\"admin\" checked={newRole === 'admin'} onChange={handleRoleChange} />\n//         <label htmlFor=\"admin\">Admin</label>\n//       </div>\n//       <button onClick={handleSubmit}>Submit</button>\n//     </div>\n//   );\n// };\n\n// export default Users;\n\n\n\n\n\n\n// import React, { useState } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { updateUserRole } from '../../redux/users/userOperations';\n\n// const Users = ({ userId }) => {\n//   const dispatch = useDispatch();\n//   const [newRole, setNewRole] = useState('');\n\n//   const handleRoleChange = (e) => {\n//     setNewRole(e.target.value);\n//   };\n\n//   const handleSubmit = async () => {\n//     try {\n//       await dispatch(updateUserRole({ userId: 61, role: newRole }));\n//       console.log('Role updated successfully');\n//     } catch (error) {\n//       console.error('Failed to update role:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h3>Change User Role</h3>\n//       <div>\n//         <input type=\"radio\" id=\"user\" name=\"role\" value=\"user\" checked={newRole === 'user'} onChange={handleRoleChange} />\n//         <label htmlFor=\"user\">User</label>\n//       </div>\n//       <div>\n//         <input type=\"radio\" id=\"moderator\" name=\"role\" value=\"moderator\" checked={newRole === 'moderator'} onChange={handleRoleChange} />\n//         <label htmlFor=\"moderator\">Moderator</label>\n//       </div>\n//       <div>\n//         <input type=\"radio\" id=\"admin\" name=\"role\" value=\"admin\" checked={newRole === 'admin'} onChange={handleRoleChange} />\n//         <label htmlFor=\"admin\">Admin</label>\n//       </div>\n//       <button onClick={handleSubmit}>Submit</button>\n//     </div>\n//   );\n// };\n\n// export default Users;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchUsers, updateUserRole } from '../../redux/users/userOperations';\nimport { DivStyles, EditRoleModal, ModalOverlay, ModalButton, Select } from './AllUsers.styled';\nimport { toast } from 'react-toastify';\n\nconst Users = () => {\n  const dispatch = useDispatch();\n  const { users } = useSelector((state) => state.user);\n  const currentUser = useSelector((state) => state.auth.user);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [newRole, setNewRole] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchUsers({ skip: 0, limit: 10 }));\n  }, [dispatch]);\n\n  const openModal = (user) => {\n    setSelectedUser(user);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setSelectedUser(null);\n    setNewRole('');\n    setIsModalOpen(false);\n  };\n\n  const handleRoleChange = (e) => {\n    setNewRole(e.target.value);\n  };\n\n  // const handleSubmit = () => {\n  //   if (selectedUser && newRole) {\n  //     dispatch(updateUserRole({ userId: selectedUser.id, newRole }))\n  //       .then(() => {\n  //         closeModal();\n  //       })\n  //       .catch((error) => {\n  //         console.error('Failed to update role:', error);\n  //       });\n  //     toast.success('Role updated successfully');\n  //   } else {\n  //     toast.error('Please select a user and select a new role');\n  //   }\n  // };\n  const handleSubmit = () => {\n    if (selectedUser && newRole) {\n      dispatch(updateUserRole({ userId: selectedUser.id, role: newRole }))\n        .then(() => {\n          closeModal();\n        })\n        .catch((error) => {\n          console.error('Failed to update role:', error);\n        });\n      toast.success('Role updated successfully');\n    } else {\n      toast.error('Please select a user and select a new role');\n    }\n  };\n\n  if (!users || users.length === 0) {\n    return <div>No users found.</div>;\n  }\n\n  const filteredUsers = users.filter((user) => user.id !== currentUser.id);\n\n  return (\n    <DivStyles>\n      {filteredUsers.map((user) => (\n        <div key={user.id}>\n          <h2>Username: {user.username}</h2>\n          <p>Email: {user.email}</p>\n          <p>Role: {user.role}</p>\n          <ModalButton onClick={() => openModal(user)}>Edit Role</ModalButton>\n        </div>\n      ))}\n      {isModalOpen && (\n        <ModalOverlay>\n          <EditRoleModal>\n            <h2>Edit Role for {selectedUser?.username}</h2>\n            <Select name=\"role\" value={newRole} onChange={handleRoleChange}>\n              <option value=\"\" disabled>Select new role</option>\n              <option name=\"user\" value=\"user\">User</option>\n              <option name=\"moderator\" value=\"moderator\">Moderator</option>\n              <option name=\"admin\" value=\"admin\">Admin</option>\n            </Select>\n            <ModalButton onClick={handleSubmit}>Submit</ModalButton>\n            <ModalButton onClick={closeModal}>Cancel</ModalButton>\n          </EditRoleModal>\n        </ModalOverlay>\n      )}\n    </DivStyles>\n  );\n};\n\nexport default Users;"],"names":["DivStyles","styled","div","_templateObject","_taggedTemplateLiteral","ModalOverlay","_templateObject2","EditRoleModal","_templateObject3","ModalButton","button","_templateObject4","Select","select","_templateObject5","Users","dispatch","useDispatch","users","useSelector","state","user","currentUser","auth","selectedUser","setSelectedUser","useState","newRole","setNewRole","isModalOpen","setIsModalOpen","useEffect","fetchUsers","skip","limit","closeModal","length","_jsx","children","filteredUsers","filter","id","_jsxs","map","username","email","role","onClick","openModal","name","value","onChange","e","target","disabled","handleSubmit","updateUserRole","userId","then","catch","error","console","toast","success"],"sourceRoot":""}